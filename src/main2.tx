use std::io;
use std::process::{Command, exit};

fn main() {
    loop {
        let mut input = String::new();

        println!("Background Sounds Controller");
        println!("1. Toggle Background Sound");
        println!("2. Choose Background Sound");
        println!("3. Adjust Volume");
        println!("4. Exit");
        println!("Choose an option:");

        io::stdin().read_line(&mut input).expect("Failed to read line");

        match input.trim().parse() {
            Ok(num) => {
                match num {
                    1 => toggle_sound(),
                    2 => choose_sound(),
                    3 => adjust_volume(),
                    4 => exit(0),
                    _ => continue,
                }
            },
            Err(_) => continue,
        }
    }
}

fn toggle_sound() {
    let status = Command::new("sh")
        .arg("-c")
        .arg("if defaults read com.apple.ComfortSounds comfortSoundsEnabled | grep -q 1; then \
                defaults write com.apple.ComfortSounds comfortSoundsEnabled -bool false; \
                else \
                defaults write com.apple.ComfortSounds comfortSoundsEnabled -bool true; \
                fi; \
                launchctl kill SIGHUP gui/$(id -u)/com.apple.accessibility.heard")
        .status()
        .expect("Failed to execute command");
    println!("Background sound toggled!");
}

fn choose_sound() {
    let sounds = ["Balanced Noise", "Bright Noise", "Dark Noise", "Ocean", "Rain", "Stream"];
    println!("Choose a sound:");
    for (i, sound) in sounds.iter().enumerate() {
        println!("{}. {}", i + 1, sound);
    }
    let mut input = String::new();
    io::stdin().read_line(&mut input).expect("Failed to read line");
    let num: usize = input.trim().parse().expect("Please enter a number");
    let sound = sounds[num - 1];
    // You would need to implement a function to change the sound based on the user's input
    println!("You chose: {}", sound);
}

fn adjust_volume() {
    let mut input = String::new();
    println!("Enter a volume level (0-100):");
    io::stdin().read_line(&mut input).expect("Failed to read line");
    let volume: i32 = input.trim().parse().expect("Please enter a number");
    let status = Command::new("osascript")
        .arg("-e")
        .arg(format!("set volume output volume {}", volume))
        .status()
        .expect("Failed to execute command");
    println!("Volume set to {}", volume);
}

